name: Build, Publish to AWS ECR & Deploy to Preview

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  ECR_REPOSITORY: menma/menmu-discord-bot
  ECR_IMAGE_TAG: preview

jobs:
  build:
    runs-on: ubuntu-latest
    environment: Preview

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '24'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ASSUME_ROLE }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.ECR_IMAGE_TAG }}
          platforms: linux/amd64
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    environment: Preview
    needs: build

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VPS_HOSTNAME }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Pull image
        env:
          IMAGE: public.ecr.aws/${{ env.ECR_REPOSITORY }}/${{ env.ECR_IMAGE_TAG }}
          VPS_HOSTNAME: ${{ secrets.VPS_USERNAME }}
          VPS_USER: ${{ secrets.VPS_USER }}
        run: |
          ssh ${VPS_USER}@${VPS_HOSTNAME} << 'EOF'
            docker pull "$IMAGE"
            docker image prune -f
          EOF
    
